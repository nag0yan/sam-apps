AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  photup
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Globals:
  Function:
    Timeout: 3

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
    BinaryMediaTypes:
      - image/*
    Auth:
      ApiKeyRequired: true
      UsagePlan:
        CreateUsagePlan: SHARED

Resources:
  ImageStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub photup-images-${AWS::Region}-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
  MetaDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub photup-metadata-${AWS::Region}-${AWS::AccountId}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: ${AWS::AccountId}.dkr.ecr.ap-northeast-1.amazonaws.com/photupb89c4a10/uploadimagefunction93dcad01repo
      Architectures:
      - x86_64
      Events:
        UploadImage:
          Type: Api
          Properties:
            Path: /images
            Method: post
      Policies:
      - S3WritePolicy:
          BucketName: !Sub photup-images-${AWS::Region}-${AWS::AccountId}
      Environment:
        Variables:
          BUCKET_NAME: !Sub photup-images-${AWS::Region}-${AWS::AccountId}
    Metadata:
      DockerTag: nodejs22.x
      DockerContext: .
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FEATURE: "upload-image"

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  UploadImageApi:
    Description: API Gateway endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
